{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["mic","window","SpeechRecognition","webkitSpeechRecognition","continous","interimResults","lang","App","useState","isListening","setIsListening","note","setNote","savedNotes","setSavedNotes","useEffect","handleListen","start","onend","console","log","stop","onstart","onresult","event","transcript","Array","from","results","map","result","join","onerror","error","className","onClick","disabled","prevSatate","n","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAIMA,G,MAAM,IADcC,OAAOC,mBAAqBD,OAAOE,0BAE7DH,EAAII,WAAY,EAChBJ,EAAIK,gBAAiB,EACrBL,EAAIM,KAAO,QA0EIC,MAvEf,WAAgB,IAAD,EAEyBC,oBAAS,GAFlC,mBAENC,EAFM,KAEOC,EAFP,OAGWF,mBAAS,MAHpB,mBAGNG,EAHM,KAGAC,EAHA,OAIuBJ,mBAAS,IAJhC,mBAINK,EAJM,KAIMC,EAJN,KAMbC,qBAAU,WACRC,MACC,CAACP,IAEJ,IAAMO,EAAe,WAChBP,GACDT,EAAIiB,QACJjB,EAAIkB,MAAQ,WACVC,QAAQC,IAAI,cACZpB,EAAIiB,WAGNjB,EAAIqB,OACJrB,EAAIkB,MAAQ,WACVC,QAAQC,IAAI,0BAIhBpB,EAAIsB,QAAU,WACZH,QAAQC,IAAI,WAGdpB,EAAIuB,SAAW,SAAAC,GACb,IAAMC,EAAaC,MAAMC,KAAKH,EAAMI,SACjCC,KAAI,SAAAC,GAAM,OAAIA,EAAO,MACrBD,KAAI,SAAAC,GAAM,OAAIA,EAAOL,cACrBM,KAAK,IAERZ,QAAQC,IAAIK,GAEZb,EAAQa,GAERzB,EAAIgC,QAAU,SAAAR,GACZL,QAAQC,IAAII,EAAMS,UAWxB,OACE,qCACE,6CACA,sBAAKC,UAAU,YAAf,UACE,sBAAKA,UAAU,MAAf,UACE,8CACA,wBAAQC,QAXO,WACrBrB,EAAc,GAAD,mBAAKD,GAAL,CAAiBF,KAC9BC,EAAQ,KAS+BwB,UAAWzB,EAA5C,uBACA,wBAAQwB,QAAS,kBAAMzB,GAAe,SAAA2B,GAAU,OAAKA,MAArD,wBACA,4BAAI1B,OAEN,sBAAKuB,UAAU,MAAf,UACE,uCACCrB,EAAWgB,KAAI,SAAAS,GAAC,OACf,4BAAYA,GAAJA,gBC7DLC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.65ca0f08.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './App.css';\n\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\nconst mic = new SpeechRecognition()\nmic.continous = true\nmic.interimResults = true\nmic.lang = \"en-US\"\n\n\nfunction App() {\n\n  const [isListening, setIsListening] = useState(false)\n  const [note, setNote] = useState(null)\n  const [savedNotes, setSavedNotes] = useState([])\n\n  useEffect(() => {\n    handleListen()\n  }, [isListening])\n\n  const handleListen = () => {\n    if(isListening){\n      mic.start()\n      mic.onend = () => {\n        console.log(\"Continue..\");\n        mic.start()\n      }\n    } else {\n      mic.stop()\n      mic.onend = () => {\n        console.log(\"Stopped Mic on Click\");\n      }\n    }\n\n    mic.onstart = () => {\n      console.log(\"Mic on\");\n    }\n\n    mic.onresult = event => {\n      const transcript = Array.from(event.results)\n        .map(result => result[0])\n        .map(result => result.transcript)\n        .join('')\n\n      console.log(transcript);\n\n      setNote(transcript)\n\n      mic.onerror = event => {\n        console.log(event.error);\n      }\n    }\n\n  }\n\n  const handleSaveNote = () => {\n    setSavedNotes([...savedNotes, note])\n    setNote('')\n  }\n\n  return (\n    <>\n      <h1>Voice Notes</h1>\n      <div className=\"container\">\n        <div className=\"box\">\n          <h2>Current Note</h2>\n          <button onClick={handleSaveNote} disabled={!note}>Save Note</button>\n          <button onClick={() => setIsListening(prevSatate => !prevSatate)}>Start/Stop</button>\n          <p>{note}</p>\n        </div> \n        <div className=\"box\">\n          <h2>Notes</h2>\n          {savedNotes.map(n => (\n            <p key={n}>{n}</p>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}